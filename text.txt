# app.permanent_session_lifetime=timedelta(minutes=5)
# app.config['SQLALCHEMY_DATABASE_URI']='sqlite:///users.sqlite3'
# app.config['SQLALCHEMY_TRACK_MODIFICATIONS']=False

app = create_app()
db=SQLAlchemy(app)

if __name__=="__main__":
    with app.app_context():
        db.create_all()
    app.run(debug=True)
         

# @app.route("/login/",methods=["POST","GET"])
# def login():
    
#     if request.method=="POST":
#         session.permanent=True
#         user=request.form["nm"]
#         session["user"]=user
        
#         found_user=users.query.filter_by(name=user).first()
#         if found_user:
#             session['email']=found_user.email
            
#         else:
#             usr=users(user,"")
#             db.session.add(usr)
#             db.session.commit()
            
        
#         flash("Login Successful")
#         return redirect(url_for("user"))

    
#     else :
#         #if request.method=="GET"
#         if "user" in session:
#             flash("Already Logged In!!")
#             return redirect(url_for("user"))
        
#         return render_template("login.html")
    
    
# @app.route("/user/" , methods=["POST","GET"])
# def user():
#     email=None
#     if "user" in session:
#         user=session["user"]
        
#         if request.method=="POST":
#             email=request.form["email"]
#             session["email"]=email
#             found_user=users.query.filter_by(name=user).first()
#             found_user.email=email
#             db.session.commit()
#             flash("Email was saved")
            
#         else:
#             if "email" in session:
#                 email=session["email"]
                
#         return render_template("user.html",email=email)

#     else:
#         flash("You are not logged in!")
#         return redirect(url_for("login"))
    
# @app.route("/logout/")
# def logout():
    
#     if "user" in session:
#         user=session["user"]
#         flash(f"You have been logged out , {user}","info")

#     session.pop("user",None)
#     session.pop("email",None)
#     return redirect(url_for("login"))
